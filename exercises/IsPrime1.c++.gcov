        -:    0:Source:IsPrime1.c++
        -:    0:Graph:IsPrime1.gcno
        -:    0:Data:IsPrime1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ------------
        -:    2:// IsPrime1.c++
        -:    3:// ------------
        -:    4:
        -:    5:// https://en.wikipedia.org/wiki/Primality_test
        -:    6:
        -:    7:#include <cassert>  // assert
        -:    8:#include <cmath>    // sqrt
        -:    9:#include <iostream> // cout, endl
        -:   10:
        -:   11:using namespace std;
        -:   12:
function _Z8is_primei called 9 returned 100% blocks executed 92%
        9:   13:bool is_prime (int n) {
        9:   14:    assert(n > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        9:   15:    if ((n == 1) || ((n % 2) == 0))
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        3:   16:        return false;
        9:   17:    for (int i = 3; i < std::sqrt(n); ++i)
call    0 returned 100%
branch  1 taken 44% (fallthrough)
branch  2 taken 56%
        4:   18:        if ((n % i) == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   19:            return false;
        5:   20:    return true;}
        -:   21:
function main called 1 returned 100% blocks executed 73%
        1:   22:int main () {
        1:   23:    cout << "IsPrime1.c++" << endl;
call    0 returned 100%
call    1 returned 100%
        -:   24:
        1:   25:    assert(!is_prime( 1));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   26:    assert(!is_prime( 2));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   27:    assert( is_prime( 3));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   28:    assert(!is_prime( 4));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   29:    assert( is_prime( 5));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   30:    assert( is_prime( 7));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   31:    assert( is_prime( 9));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   32:    assert(!is_prime(27));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   33:    assert( is_prime(29));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   34:
        1:   35:    cout << "Done." << endl;
call    0 returned 100%
call    1 returned 100%
function _GLOBAL__sub_I__Z8is_primei called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        4:   36:    return 0;}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:   37:
        -:   38:/*
        -:   39:% IsPrime1
        -:   40:gcov -b IsPrime1.c++ | grep -A 5 "File 'IsPrime1.c++'"
        -:   41:File 'IsPrime1.c++'
        -:   42:Lines executed:100.00% of 17
        -:   43:Branches executed:100.00% of 28
        -:   44:Taken at least once:64.29% of 28
        -:   45:No calls
        -:   46:IsPrime1.c++:creating 'IsPrime1.c++.gcov'
        -:   47:*/
